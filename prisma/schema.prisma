// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  pdfs          PDF[]
  activities    Activity[]
  settings      UserSettings?
  storageUsed   Int          @default(0) // Em bytes
  storageLimit  Int          @default(52428800) // 50MB em bytes
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())

  @@map("users")
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  image              String?
  darkMode           Boolean  @default(true)
  language           String   @default("pt-BR")
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  twoFactorAuth      Boolean  @default(false)
  autoDeleteItems    Boolean  @default(false)
  phone              String?
  address            String?
  birthdate          String?
  secondaryEmails    String[] @default([])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PDF {
  id          String     @id @default(uuid())
  name        String
  s3Key       String
  s3Url       String
  fileHash    String?    @unique // Hash único para identificar arquivos duplicados
  fileSize    Int?       // Tamanho do arquivo em bytes
  pageCount   Int?       // Número de páginas
  fileType    PDFType    @default(DOCUMENT)
  isStarred   Boolean    @default(false)
  viewCount   Int        @default(0)
  lastViewed  DateTime?
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  activities  Activity[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PDFType {
  DOCUMENT
  FORM
  PRESENTATION
  BOOK
  REPORT
  OTHER
}

model Activity {
  id        String       @id @default(uuid())
  type      ActivityType
  details   String?      @db.Text
  userId    String
  pdfId     String?
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  pdf       PDF?         @relation(fields: [pdfId], references: [id], onDelete: SetNull)
}

enum ActivityType {
  UPLOAD
  VIEW
  DOWNLOAD
  DELETE
  STAR
  UNSTAR
  SHARE
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
